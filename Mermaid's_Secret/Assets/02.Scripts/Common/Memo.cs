//Memo

/*  기본 규칙
  
    1. 그날 코딩 끝나면 한번 더 정리할것 없나 보고 끄기
        ex) 종료 조건있는 반복문을 for문이 아닌 while문(변수++)으로 사용해서 불필요한 변수를 추가하지는 않았는지,
            줄일 수 있었는데 장황한 채로 남겨진 코드는 없는지, 기능 주석이 안적힌 함수는 없는지, 
            쓰려다가 안쓰고 잊어버려서 미처 지우지 못한 변수는 없는지 등

    2. 각자의 스크립트가 하는 일을 확실하게 하기
        ex) 플레이어 스탯,이동관련은 플레이어 스크립트 /  전반적인 배경, 흐름은 게임매니저 / 아이템 수집, 조합 등은 아이템매니저 등

    3. 무분별한 Instantiate -> Destory 지양. 이유있는 상황이 아니면 오브젝트 풀링 사용하기


  -[ 멤버변수 표기 관련 ]------------------------------------------------------------------------------------------------------------------------


      1. 명시하지 않아도 기본적으로 private로 선언이 되기는 하나 항상 private 같이 기재하기(팀원간의 코드 명시성 ↑)
           ex) bool m_b_name(X) / private bool m_b_name(O)


      2. 헝가리안 표기법을 기반으로 변수 선언 - private/public, 자료형(소문자) , 변수이름
           ex) private bool name -> private bool m_b_name;
               public bool name -> public bool b_name;


      2-1. GameObject, Rigidbody 같이 애매한건 그냥 앞글자 대문자로 땁시다
              ex) private GameObject m_G_name;


      3. 협업 중 무분별한 public 변수 이용시 코드가 엉킬수 있으므로, 인스펙터에서 조절할 수는 있지만 
         타 스크립트에서는 변수값에 접근하지 못하게 하고싶을때 private + 스크립트 직렬화(SerializeField) 사용하기
         (유니티 공식에서도 특별한 상황이 아니면 public을 쓰기를 권장하고 회사에서도 그냥 보통 public 쓴다고 하지만 우리는 코린이니까 자신+서로를 위해!)
         ※ 직렬화 바로 밑의 변수 한 개에만 적용되기 때매 일일이 달아줘야되서 좀 귀찮기는 합니다ㅜ
           ex) [SerializeField] private int m_i_bubbleMax = 13;  
                  └→ 물속 물거품 개수를 인스펙터에서 변경할수는 있지만 타 스크립트에서 해당 변수에 접근할 수 없음


      4. 변수 옆에 뭐하는 변수인지 주석 달아놓기 (+ 함수 위에도 기능 간단하게 꼭 주석달아놓기)
           ex)  private GameObject m_G_bubble; //버블 프리팹
           ex2) //수중 물거품 랜덤 위치 생성
                  void makin_Bubble()
                  { ~~; }



  -[ 이동 관련 ]--------------------------------------------------------------------------------------------------------------------------------
      
      ㆍFixedUpdate : rigidbody가 적용된 오브젝트 사용할 때      ex) 무기 투척

      ㆍUpdate : 캐릭터 기본이동 및 회전

      ㆍLateUpdate : 카메라 이동 및 회전      ex) 3인칭 카메라 코드로 직접 제어. 이 프로젝트에선 자주 쓰이진 않을 것 같음.




  -[ 함수 관련 ]---------------------------------------------------------------------------------------------------------------------------------
     
     사용되지 않는 함수들은 정리하기 (Start, Update 등 중요 함수 포함. 체감은 크지않지만 굳이 불필요한 연산은 줄이기)
     GetComponent 보다는 Inspector 링크 지향하기. (마우스 드래그로 넣을수 있는것들. 꼭 필요하지 않는이상 GetComponent 쓰지않기. 불필요한 코드연산 줄이기)



  -[ 코드 구조 관련 ]-----------------------------------------------------------------------------------------------------------------------------
   
    1) 아이템 : 개별 Class + 상속 지향. 아이템 구별은 Enum 지향. (추후 확장성, 관리 용이성을 위해) 

    2) 싱글톤 있는 매니저들은 각자의 Start 나 Awake 를 넣을시 특정 상황에서 호출 순서가 꼬일 수 있으므로 
       첫 실행시 바로 진행되어야하는 것들은 Init() 함수에 넣고 한개의 매니저의 Start 나 Awake에 같이 때려박아넣어두기 (코드 호출 흐름도 안정화 때문)

    3) 합칠수 있는 코드는 합쳐보기(각자가 만들어 둔 것들 중 중복되는 코드는 정리)

    4) Instantiate 사용시 특정 부모폴더 밑에서 생성되게 코딩하기(나중에 생성할 오브젝트가 많아지면 하이어라키 엉망진창됨)

*/


/*  건의 사항 & 논의 사항
   

 */


/*  GameManager 
 
 변경 사항

 -- 2021.07.22-------------

    호출 함수를 씬별로 관리할 수 있도록 public enum Scene{} 추가 - YSG
    인스펙터 내의 항목을 보기 쉽게 하기 위해 Header 추가 - YSG

 
 
*/


/*  ItemManager 

 변경 사항

-- 2021.07.22-------------

     호출 함수를 씬별로 관리하기 위해 GM의 enum Scene{} 접근하는 코드 추가 - YSG
     인스펙터 내의 항목을 보기 쉽게 하기 위해 Header 추가 - YSG
     섬 씬_조개 생성 함수 추가 - YSG
 
*/

/*  PlayerController 

 변경 사항

-- 2021.07.21-------------

    플레이어 이동 및 애니메이션 구현 (육지) - YSG
    플레이어 공격 애니메이션 구현 (육지) - YSG
    상호작용 가능한 오브젝트에 마우스 올릴 시 Outline 활성화되도록 구현 - YSG
        └→ ⚠ Update문에서 계속 RayCast로 체크해주고 있으므로 좀 더 효율적인 방법 찾아볼 것 - YSG

-- 2021.07.22-------------

    플레이어의 이동에 사용하는 코드를 Move에서 SimpleMove로 변경 - YSG
    아이템 오브젝트에 일정 거리 내로 접근&&마우스 올렸을 때 키보드 조작 안내 UI 표시하는 함수 추가 - YSG

-- 2021.07.23-------------

    커맨드 버튼(E키) UI 표시 기능 추가 - YSG
    나무 / 조사하기 등 행동 딜레이가 있는 항목일 시 버튼 누르는 동안 게이지가 차오르도록 하는 UI 기능 추가 - YSG
    조사하기 / 아이템 획득 등 플레이어가 취해야할 행동에 따라 커맨드 버튼 UI의 텍스트가 변경되도록 하는 코드 추가 - YSG
        └→ ⚠ 처음에는 OutLine만 구현하려 했기에 PlayerController에 작업하였으나 
               연결되는 코드에 UI 및 조사하기 등의 기능이 추가되었으므로 해당 코드들을 GM으로 옮기는 것이 나을지 생각해볼 것

-- 2021.07.26-------------

    기존에 PlayerCtrl에서 조사 영역 감지, 함수 실행하던 코드를 별도의 스크립트(LookPoint)로 분리하여 관리 - YSG

-- 2021.07.27-------------

    섬 씬과 연구소 씬의 플레이어 이동 스크립트 병합 (Character Controller를 이용하도록 변경하여 통일) - YSG

-- 2021.08.02-------------

    기존에 PlayerCtrl에서 아이템의 RayCast 감지 및 아웃라인 표시, 조사영역 감지 등을 처리하던 코드를 별도의 스크립트 (PlayerAction)으로 분리 - YSG

*/


/* 수중도시 씬


*/


/* 섬 씬
 
 변경 사항

-- 2021.07.22-------------

    Terrian 및 물 오브젝트 추가(배경용) - YSG
    03.Prefabs 폴더에 Common폴더 추가 - YSG
    03.Prefabs - Common에 페트병, 나뭇가지 프리팹 추가 - YSG
    맵에 페트병과 나뭇가지 배치 - YSG
    
-- 2021.07.23-------------
    
    건설(현재는 다리밖에 없음) 영역 조사 시 힌트 오브젝트가 표시되도록 하는 기능 추가 - YSG
    기본 지형에 동굴 추가 작업 중 - YSG

-- 2021.07.24-------------

    동굴 지형 추가 완료 - YSG
    Terrian 지형 세부 조정 - YSG
    연구소 문 앞에 동굴 위치에 대한 힌트 오브젝트 추가 - YSG
    동굴에 연구소 입구 비밀번호에 대한 힌트 오브젝트(동굴) 추가 - YSG
    연구소 입구 비밀번호: 8413

-- 2021.07.25-------------

    비밀번호 입력 시스템 작업 중

-- 2021.07.26-------------
    
    LookPoint 스크립트 - 조사 영역의 종류(타입)에 따라 다른 함수가 실행되도록 enum 함수를 이용하여 관리할 수 있게 변경 - YSG 
    비밀번호 입력을 처리하는 Password 스크립트 추가 (파일 위치 - 02.Scripts > Common) - YSG

-- 2021.07.27-------------

    Password 스크립트에 패스워드 패널 UI가 열리거나 닫히는 연출 구현하는 코루틴 함수 추가 (openPwPanel, closePwPanel) - YSG
    로딩 최적화를 위해 paper, bottle 등의 버텍스 수 조절 - YSG

-- 2021.07.28-------------

    EnemyAI (NavMesh) 기본 틀 구현 - YSG

-- 2021.07.29-------------

    EnemyAI (NavMesh) 오류 수정 중 - YSG

-- 2021.07.30-------------

    EnemyAI (NavMesh) 오류 수정 중 - YSG
    Enemy의 애니메이션에 공격 모션 추가
    플레이어 작살(무기) 장착 공격 콜라이더 구현 - YSG
    Enemy의 피격 모션 구현 - YSG

-- 2021.07.31-------------

    인벤토리 시스템 구현(공부) 중... UI 배치 - YSG
    인벤토리 시스템 구현(공부) 중... Item_, Slot, Inventory 스크립트 추가 - YSG
    인벤토리 아이콘으로 사용하기 위한 스프라이트 추가(04.Image > YSG) - YSG

-- 2021.08.01-------------

    인벤토리 시스템 구현(공부) 중... 아이템 획득 시 인벤토리에 추가, 개수 표시 기능까지 구현 - YSG

-- 2021.08.02-------------

    인벤토리 시스템 구현(공부) 중... 아이템 효과를 구분짓기 위한 ItemEffectDatabase 스크립트 추가 - YSG
    

*/

/* 연구소 씬


*/
